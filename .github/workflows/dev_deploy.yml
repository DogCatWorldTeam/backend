# github repository Actions 페이지에 나타낼 이름
name: CI/CD

# event trigger
on:
  push:
    branches: [ "develop" ]


permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      ## jdk setting
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin' # https://github.com/actions/setup-java

      ## gradle caching
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Grant execute permission for gradlew
        run:
          chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test
        shell: bash

      - name: Decode application secret key
        run: echo "${{ secrets.APPLICATION_SECRET_KEY }}" | base64 --decode > ./src/main/resources/application-secret.yml

      - name: Create .env file
        run: |
          touch .env
          echo API_KEY=${{ secrets.ENV_KEY }} >> .env
          cat .env
          
      ## docker build & push to production
      - name: Docker build & push to prod
        if: contains(github.ref, 'dev')
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker build -f Dockerfile -t ${{ secrets.DOCKER_REPO }} .
          docker push ${{ secrets.DOCKER_REPO }}
      

      ## deploy to production
      - name: Deploy to prod
        uses: appleboy/ssh-action@v0.1.6
        id: deploy-prod
        if: contains(github.ref, 'dev')
        with:
          host: ${{ secrets.EC2_HOST}}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          port: 22
          envs: GITHUB_SHA
          script: |
            cd ./backend
            echo test1234 > test.txt
            sudo docker rm -f $(docker ps -qa) || true
            sudo docker pull ${{ secrets.DOCKER_REPO }}
            docker-compose up --build -d
            docker image prune -f
